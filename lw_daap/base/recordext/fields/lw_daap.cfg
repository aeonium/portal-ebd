#
# This file is part of Lifewatch DAAP.
# Copyright (C) 2015 Ana Yaiza Rodriguez Marrero.
#
# Lifewatch DAAP is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Lifewatch DAAP is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Lifewatch DAAP. If not, see <http://www.gnu.org/licenses/>.

# Record id
@extend
recid:
    producer:
        json_for_form(), {'recid': ''}


# period refers to the time period covered by the dataset
period:
    schema:
        {'period': {'type': 'list', 'force': True}}
    creator:
        marc, "0452_", { 'start': resolve_period(value['b'], 'start'), 'end': resolve_period(value['b'], 'end') }
    producer:
        json_for_marc(), {"0452_b": "[value['start'], value['end']]"}
        json_for_form(), {"period": "[{'start': value['start'], 'end': value['end']}]"}
    json:
        loads, lambda ds: [{'start': __import__('datetime').datetime.strptime(d['start'], "%Y-%m-%d").date(), 'end': __import__('datetime').datetime.strptime(d['end'], "%Y-%m-%d").date()} for d in ds]
        dumps, lambda ds: [{'start': d['start'].isoformat(), 'end': d['end'].isoformat()} for d in ds]


frequency:
    schema:
        {'frequency': {'type': 'list', 'force': True}}
    creator:
        marc, "310__", { 'size': resolve_frequency(value['a'], 'size'), 'unit': resolve_frequency(value['a'], 'unit') }
    producer:
        json_for_marc(), {"310__a": "[value['size'], value['unit']]"}
        json_for_form(), {"frequency": "[{'size': value['size'], 'unit': value['unit']}]"}


spatial:
    schema:
        {'spatial': {'type': 'list', 'force': True}}
    creator:
        marc, "03430", { 'west': resolve_spatial(value['d'], 'west'), 'east': resolve_spatial(value['e'], 'east'), 'north': resolve_spatial(value['f'], 'north'), 'south': resolve_spatial(value['g'], 'south') }
    producer:
        json_for_marc(), {"03430d": "west", "03430e": "east", "03430f": "north", "03430g": "south"}
        json_for_form(), {"spatial": "[{'west': value['west'], 'east': value['east'], 'north': value['north'], 'south': value['south']}]"}


upload_type:
    creator:
        @only_if_master_value(value['a'] in ['dmp', 'dataset', 'software', 'analysis'])
        marc, "980__", value['a']
    producer:
        json_for_marc(), {"980__a": "value"}
        json_for_form(), {"upload_type": ""}


collections:
    schema:
        {'collections': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value(not ((value['a'] or '').startswith('provisional-community-') or (value['a'] or '').startswith('community-') or (value['a'] or '').startswith('project-') or value['a'] in ['dmp', 'dataset', 'software', 'analysis']))
        marc, "980__", { 'primary':value['a'], 'secondary':value['b'], 'deleted':value['c'] }
    producer:
        json_for_marc(), {"980__a": "primary", "980__b": "secondary", "980__c": "deleted"}


communities:
    schema:
        {'communities': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value((value['a'] or '').startswith('community-'))
        marc, "980__", value['a'][len('community-'):]
    producer:
        json_for_marc(), {"980__a": "'community-'+value"}
        json_for_form(), {"communities": "[{'identifier': value, 'provisional': False}]"}


provisional_communities:
    schema:
        {'provisional_communities': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value((value['a'] or '').startswith('provisional-community-'))
        marc, "980__", value['a'][len('provisional-community-'):]
    producer:
        json_for_marc(), {"980__a": "'provisional-community-'+value"}
        json_for_form(), {"communities": "[{'identifier': value, 'provisional': True}]"}


project:
    creator:
        @only_if_master_value((value['a'] or '').startswith('project-'))
        marc, "980__", value['a'][len('project-'):]
    producer:
        json_for_marc(), {"980__a": "'project-'+value", }
        json_for_form(), {"project": "value", }


# Marc 983 and subfields are picked randomly here:
record_curated_in_project:
    creator:
        @only_if_master_value(not value['b'] and not value['c'])
        marc, "983__", __import__('ast').literal_eval(value['a'])
    producer:
        json_for_marc(), {"983__a": "",}
        json_for_form(), {"record_curated_in_project": ""}


record_public_from_project:
    creator:
        @only_if_master_value(not value['a'] and not value['c'])
        marc, "983__", __import__('ast').literal_eval(value['b'])
    producer:
        json_for_marc(), {"983__b": "",}
        json_for_form(), {"record_public_from_project": ""}


record_selected_for_archive:
    creator:
        @only_if_master_value(not value['a'] and not value['b'])
        marc, "983__", __import__('ast').literal_eval(value['c'])
    producer:
        json_for_marc(), {"983__c": "",}
        json_for_form(), {"record_selected_for_archive": ""}


notes:
    creator:
        marc, "500__", value['a']
    producer:
        json_for_marc(), {"500__a": "",}
        json_for_form(), {"notes": ""}


subjects:
    schema:
        {'subjects': {'type': 'list', 'force': True}}
    creator:
        marc, "6501_", {'term': value['a'], 'identifier': resolve_subject(value['0'], 'identifier'), 'scheme': resolve_subject(value['0'], 'scheme')}
    producer:
        json_for_marc(), {"6501_a": "term", "6501_0": "'(%s)%s' % (value['scheme'], strip_prefix(value['identifier'], 'gnd:'))"}
        json_for_form(), {"subjects": "[{'term': value['term'], 'identifier': value['identifier'], 'scheme': value['scheme']}]"}


related_identifiers:
    schema:
        {'related_identifiers': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value((value['n'] or '').lower() in ['doi', 'ark', 'handle', 'purl', 'lsid', 'urn', 'url', 'ads', 'pmcid', 'isbn', 'issn', 'orcid', 'isni', 'ean13', 'ean8', 'istc', 'pmid', 'arxiv', 'gnd', ])
        marc, "773__", {'identifier':value['a'], 'scheme':(value['n'] or '').lower(), 'relation':value['i'] or 'isReferencedBy',}
    producer:
        json_for_marc(), {"773__a": "identifier", "773__n": "scheme", "773__i": "relation"}
        json_for_form(), {"related_identifiers": "[{'relation': value['relation'], 'scheme': value['scheme'], 'identifier': value['identifier']}]"}


rel_dataset:
    schema:
        {'rel_dataset': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value(not value['g'])
        marc, "773__", value['k']
    producer:
        json_for_marc(), {"773__k": "",}
        json_for_form(), {"rel_dataset": "[{'identifier': value}]"}


rel_software:
    schema:
        {'rel_software': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value(not value['k'])
        marc, "773__", value['g']
    producer:
        json_for_marc(), {"773__g": "",}
        json_for_form(), {"rel_software": "[{'identifier': value}]"}


doi:
    creator:
        @only_if_master_value(((value['2'] or '').upper() == 'DOI') and ((value['q'] or '') == ''))
        marc, "0247_", value['a']
    producer:
        json_for_marc(), {'0247_2': 'str("DOI")', '0247_a': ''}
        json_for_form(), {"doi": ""}
        json_for_ld(), {'@id': '"http://dx.doi.org/" + value'}
        json_for_ld(), {'@context': 'str("http://schema.org")'}


publication_date:
    creator:
        @only_if_master_value(not value['a'] and not value['b'])
        marc, "260__", datetime.date(*(time.strptime(value['c'] or '', '%Y-%m-%d')[0:3]))
    producer:
        json_for_marc(), {"260__c": "value.isoformat()"}
        json_for_form(), {"publication_date": ""}
    json:
        loads, lambda d: __import__('datetime').datetime.strptime(d, "%Y-%m-%d").date()
        dumps, lambda d: d.isoformat()


title:
    creator:
        marc, "245__", value['a']
    producer:
        json_for_marc(), {"245__a": ""}
        json_for_form(), {"title": ""}


_first_author, first_author, creator:
    creator:
        @only_if_master_value(value['4'] is None or value['4'] == '')
        marc, "100__", { 'name':value['a'], 'affiliation':value['u'], 'gnd':resolve_authority(value['0'], 'gnd'), 'orcid':resolve_authority(value['0'], 'orcid'), 'familyname': value['a'].split(',')[0].strip(), 'givennames': ' '.join(value['a'].split(',')[1:]).strip()}
    producer:
        json_for_marc(), {"100__a": "name", "100__u": "affiliation", "100__0": "['(gnd)'+strip_prefix(value['gnd'], 'gnd:') if value.get('gnd') else None, '(orcid)'+value['orcid'] if value.get('orcid') else None]"}


_additional_authors, additional_authors:
    schema:
        {'_additional_authors': {'type': 'list', 'force': True}}
    creator:
        @parse_first('_first_author')
        @only_if_master_value(value['4'] is None or value['4'] == '')
        marc, "700__", {'name': value['a'], 'affiliation':value['u'], 'gnd': resolve_authority(value['0'], 'gnd'), 'orcid': resolve_authority(value['0'], 'orcid'), 'familyname': value['a'].split(',')[0].strip(), 'givennames': ' '.join(value['a'].split(',')[1:]).strip()}
    producer:
        json_for_marc(), {"700__a": "name", "700__u": "affiliation", "700__0": "['(gnd)'+strip_prefix(value['gnd'], 'gnd:') if value.get('gnd') else None, '(orcid)'+value['orcid'] if value.get('orcid') else None]"}


authors:
    """List with all the authors, connected with main_author and rest_authors"""
    derived:
        @parse_first('_first_author', '_additional_authors')
        @connect('_first_author', sync_authors)
        @connect('_additional_authors', sync_authors)
        @only_if('_first_author' in self or '_additional_authors' in self)
        util_merge_fields_info_list(self, ['_first_author', '_additional_authors'])
    producer:
        json_for_form(), {"creators": "[{'name': value.get('name',''), 'affiliation': value.get('affiliation',''), 'gnd': value.get('gnd', ''), 'orcid': value.get('orcid', '')}]"}
        json_for_ld(), {"author": "[{'@type': 'Person', 'name': value.get('name',''), '@id': 'http://orcid.org/' + value.get('orcid','') if value.get('orcid') else None, }]"}


description:
    creator:
        marc, "520__", value['a']
    producer:
        json_for_marc(), {"520__a": "",}
        json_for_form(), {"description": ""}


keywords:
    schema:
        {'keywords': {'type': 'list', 'force': True}}
    creator:
        marc, "6531_", value['a']
    producer:
        json_for_marc(), {"6531_a": "",}
        json_for_form(), {"keywords": "[value]"}
        json_for_ld(), {"keywords": "[value]"}


os:
    creator:
        @only_if_master_value(not value['a'] and not value['b'])
        marc, "753__", value['c']
    producer:
        json_for_marc(), {"753__c": ""}
        json_for_form(), {"os": "value"}


flavor:
    creator:
        @only_if_master_value(not value['b'] and not value['c'])
        marc, "753__", value['a']
    producer:
        json_for_marc(), {"753__a": ""}
        json_for_form(), {"flavor": "value"}

app_env:
    creator:
        @only_if_master_value(not value['a'] and not value['c'])
        marc, "753__", value['b']
    producer:
        json_for_marc(), {"753__b": ""}
        json_for_form(), {"app_env": "value"}

#
# License details
#
__license_text__:
    creator:
        marc, "540__", {'license':value['a'], 'url':value['u']}


__license_identifier__:
    creator:
        marc, "65017", {'source':value['2'], 'identifier':value['a']}


license:
    derived:
        @depends_on('__license_text__', '__license_identifier__')
        dict(self.get('__license_text__').items() + self.get('__license_identifier__').items())
    producer:
        json_for_marc(), {"540__a": "license", "540__u": "url"}
        json_for_marc(), {"650172": "source", "65017a": "identifier"}
        json_for_form(), {"license": "identifier"}
        json_for_ld(), {"license": "url"}


access_right:
    creator:
        marc, "542__", value['l']
    producer:
        json_for_marc(), {"542__l": ""}
        json_for_form(), {"access_right": ""}


embargo_date:
    creator:    
        marc, "942__", datetime.date(*(time.strptime(value['a'] or '', '%Y-%m-%d')[0:3]))
    producer:
        json_for_marc(), {"942__a": "self.get('embargo_date').isoformat()"}
        json_for_form(), {"embargo_date": ""}
    json:
        dumps, lambda d: d.isoformat()
        loads, lambda d: __import__('datetime').datetime.strptime(d, "%Y-%m-%d").date()


access_conditions:
    creator:
        marc, "506__", value['a']
    producer:
        json_for_marc(), {"506__a": "",}
        json_for_form(), {"access_conditions": ""}


access_groups:
    schema:
        {'access_groups': {'type': 'list', 'force': True}}
    creator:
        marc, "5061_", value['d']
    producer:
        json_for_marc(), {"5061_d": "value"}
        json_for_form(), {"access_groups": "[{'identifier': value}]"}


@hidden
owner:
    creator:
        marc, "8560_", {'email': value['f'], 'username': value['y'],
            'id': value['w'], 'deposition_id': value['b']}
    producer:
        json_for_marc(), {"8560_f": "email", "8560_y": "username", "8560_w": "id", "8560_b": "deposition_id"}


# used ?
language:
    creator:
        marc, "041__", value['a']
    producer:
        json_for_marc(), {"041__a": ""}


# files
fft:
    schema:
        {'fft': {'type': 'list', 'force': True}}
    creator:
        marc, "FFT__", {'path': value['a'],
                        'description': value['d'],
                        'format': value['f'],
                        'temporary_id': value['i'],
                        'new_name': value['m'],
                        'name': value['n'],
                        'flag': value['o'],
                        'restriction': value['r'],
                        'timestamp': value['s'],
                        'docfile_type': value['t'],
                        'version': value['v'],
                        'icon_path': value['x'],
                        'comment': value['z'],
                        'document_moreinfo': value['w'],
                        'version_moreinfo': value['p'],
                        'version_format_moreinfo': value['b'],
                        'format_moreinfo': value['u']
                       }
        @only_if_master_value(is_local_url(value['u']))
        marc, "8564_", {'host_name': value['a'],
                        'access_number': value['b'],
                        'compression_information': value['c'],
                        'path':value['d'],
                        'electronic_name': value['f'],
                        'request_processor': value['h'],
                        'institution': value['i'],
                        'format': value['q'],
                        'settings': value['r'],
                        'file_size': value['s'],
                        'url': value['u'],
                        'subformat':value['x'],
                        'description':value['y'],
                        'comment':value['z']}
    producer:
        json_for_marc(), { "FFT__a": "path",
              "FFT__d": "description",
              "FFT__f": "format",
              "FFT__i": "temporary_id",
              "FFT__m": "new_name",
              "FFT__n": "name",
              "FFT__o": "flag",
              "FFT__r": "restriction",
              "FFT__s": "timestamp",
              "FFT__t": "docfile_type",
              "FFT__v": "version",
              "FFT__x": "icon_path",
              "FFT__z": "comment",
              "FFT__w": "document_moreinfo",
              "FFT__p": "version_moreinfo",
              "FFT__b": "version_format_moreinfo",
              "FFT__f": "format_moreinfo", }


_files:
    calculated:
        @parse_first('recid')
        get_files_from_bibdoc(self.get('recid', -1))
    description:
        """
        Retrieves all the files related with the recid that were passed to the system
        using the FFT field described above

        Note: this is a mandatory field and it shouldn't be remove from this configuration
        file. On the other hand the function that retrieve the metadata from BibDoc could
        be enrich.
        """
    producer:
        json_for_marc(), {"8564_z": "comment", "8564_y": "description", "8564_q": "format", "8564_f": "name", "8564_s": "size", "8564_u": "url"}
